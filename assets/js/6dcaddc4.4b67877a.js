"use strict";(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[5128],{4774:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>d,contentTitle:()=>i,default:()=>a,frontMatter:()=>s,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"development/index","title":"Development","description":"Dummy Workflow","source":"@site/docs/development/index.md","sourceDirName":"development","slug":"/development/","permalink":"/docs/development/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"documentationSidebar","previous":{"title":"Workflows","permalink":"/docs/workflows"}}');var r=t(4848),l=t(8453);const s={},i="Development",d={},c=[{value:"Dummy Workflow",id:"dummy-workflow",level:2},{value:"Workflow",id:"workflow",level:3},{value:"Structure",id:"structure",level:3},{value:"Execution Process",id:"execution-process",level:3}];function h(e){const o={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(o.header,{children:(0,r.jsx)(o.h1,{id:"development",children:"Development"})}),"\n",(0,r.jsx)(o.h2,{id:"dummy-workflow",children:"Dummy Workflow"}),"\n",(0,r.jsx)(o.p,{children:"Dummy workflow is an example workflow to show how the workflow engine works."}),"\n",(0,r.jsx)(o.p,{children:"The workflow consists of 3 steps:"}),"\n",(0,r.jsxs)(o.ol,{children:["\n",(0,r.jsx)(o.li,{children:"Step 1: Static text input (Hello, world!)"}),"\n",(0,r.jsx)(o.li,{children:"Step 2: Text operation, reverse text"}),"\n",(0,r.jsx)(o.li,{children:"Step 3: Print text"}),"\n"]}),"\n",(0,r.jsx)(o.h3,{id:"workflow",children:"Workflow"}),"\n",(0,r.jsx)(o.p,{children:"Flowchart of the workflow:"}),"\n",(0,r.jsx)(o.mermaid,{value:'flowchart LR\n  subgraph "Dummy Workflow"\n    direction LR\n    Step1[StaticTextInput]\n    Step2[Text Operation: Reverse]\n    Step3[Echo]\n\n    Step1 --\x3e|"Hello, world!"| Step2\n    Step2 --\x3e|"!dlrow ,olleH"| Step3\n  end'}),"\n",(0,r.jsx)(o.h3,{id:"structure",children:"Structure"}),"\n",(0,r.jsx)(o.p,{children:"Here is the JSON structure of the workflow:"}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-json",children:'{\n  "name": "Dummy Workflow",\n  "steps": [\n    { "type": "StaticTextInput", "input": "Hello, world!" },\n    { "type": "TextOperations.Reverse" },\n    { "type": "Echo" }\n  ]\n}\n'})}),"\n",(0,r.jsx)(o.h3,{id:"execution-process",children:"Execution Process"}),"\n",(0,r.jsx)(o.p,{children:"The execution process of the workflow is as follows:"}),"\n",(0,r.jsxs)(o.ol,{children:["\n",(0,r.jsx)(o.li,{children:"The workflow is created via the API or UI."}),"\n",(0,r.jsx)(o.li,{children:"The system queues the workflow."}),"\n",(0,r.jsx)(o.li,{children:"Each step is executed in order."}),"\n",(0,r.jsx)(o.li,{children:"As each step is executed, the system updates the workflow status and the step status."}),"\n",(0,r.jsx)(o.li,{children:"The workflow is marked as completed when all steps are completed."}),"\n",(0,r.jsx)(o.li,{children:"User can be notified via webhook, email, or other means."}),"\n"]})]})}function a(e={}){const{wrapper:o}={...(0,l.R)(),...e.components};return o?(0,r.jsx)(o,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);