"use strict";(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[8041],{1509:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"workflows","title":"Workflows","description":"Workflows are the main execution unit of the Data Flow Platform. They are sequences of tasks that are executed in order to achieve a specific automation goal.","source":"@site/docs/workflows.md","sourceDirName":".","slug":"/workflows","permalink":"/docs/workflows","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Workflows","sidebar_position":2},"sidebar":"documentationSidebar","previous":{"title":"Data Flow Platform","permalink":"/docs/"},"next":{"title":"Tasks","permalink":"/docs/tasks"}}');var t=i(4848),o=i(8453);const r={title:"Workflows",sidebar_position:2},l="Workflows",a={},c=[{value:"Workflow Definition",id:"workflow-definition",level:2},{value:"Workflow Components",id:"workflow-components",level:3},{value:"Inputs",id:"inputs",level:4},{value:"Tasks",id:"tasks",level:4},{value:"Outputs",id:"outputs",level:4},{value:"Variable References",id:"variable-references",level:3},{value:"Workflow Execution",id:"workflow-execution",level:2},{value:"Execution States",id:"execution-states",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Conditional Execution",id:"conditional-execution",level:3},{value:"Workflow Management",id:"workflow-management",level:2},{value:"Versioning",id:"versioning",level:3},{value:"Monitoring",id:"monitoring",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"workflows",children:"Workflows"})}),"\n",(0,t.jsx)(n.p,{children:"Workflows are the main execution unit of the Data Flow Platform. They are sequences of tasks that are executed in order to achieve a specific automation goal."}),"\n",(0,t.jsx)(n.h2,{id:"workflow-definition",children:"Workflow Definition"}),"\n",(0,t.jsx)(n.p,{children:"A workflow definition is a JSON object that specifies:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Basic workflow metadata (title, description)"}),"\n",(0,t.jsx)(n.li,{children:"Input parameters"}),"\n",(0,t.jsx)(n.li,{children:"Sequence of tasks to execute"}),"\n",(0,t.jsx)(n.li,{children:"Output mappings"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Here's an example workflow definition:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "title": "YouTube Video Transcription",\n  "description": "Downloads a YouTube video and transcribes its audio content",\n  "inputs": [\n    {\n      "name": "video_url",\n      "type": "text",\n      "description": "YouTube video URL to process"\n    }\n  ],\n  "tasks": [\n    {\n      "name": "download_video",\n      "type": "youtube.download",\n      "inputs": {\n        "url": "{{inputs.video_url}}"\n      }\n    },\n    {\n      "name": "extract_audio",\n      "type": "video.extract_audio",\n      "inputs": {\n        "video": "{{tasks.download_video.outputs.video}}"\n      }\n    },\n    {\n      "name": "transcribe",\n      "type": "openai.audio.transcription",\n      "inputs": {\n        "audio": "{{tasks.extract_audio.outputs.audio}}"\n      }\n    }\n  ],\n  "outputs": [\n    {\n      "name": "transcription",\n      "type": "text",\n      "value": "{{tasks.transcribe.outputs.text}}"\n    }\n  ]\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"workflow-components",children:"Workflow Components"}),"\n",(0,t.jsx)(n.h4,{id:"inputs",children:"Inputs"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"inputs"})," section defines the parameters that must be provided when executing the workflow. Each input has:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"name"}),": Unique identifier for the input"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"type"}),": Data type (",(0,t.jsx)(n.code,{children:"text"}),", ",(0,t.jsx)(n.code,{children:"number"}),", ",(0,t.jsx)(n.code,{children:"boolean"}),", or ",(0,t.jsx)(n.code,{children:"file"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"description"}),": Human-readable description"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"required"}),": Boolean indicating if the input is mandatory (defaults to ",(0,t.jsx)(n.code,{children:"true"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"default"}),": Optional default value if none is provided"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"tasks",children:"Tasks"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"tasks"})," array defines the sequence of operations to perform. Each task has:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"name"}),": Unique identifier for the task within the workflow"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"type"}),": The task type to execute (must be a supported task type)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"inputs"}),": Mapping of task input parameters"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"outputs"}),": Optional mapping of task outputs (defaults can be used)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"condition"}),": Optional expression determining if task should execute"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"retry"}),": Optional retry configuration for failed tasks"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Tasks are executed sequentially by default. The platform ensures each task's dependencies (inputs) are available before execution."}),"\n",(0,t.jsx)(n.h4,{id:"outputs",children:"Outputs"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"outputs"})," section maps internal workflow values to the final workflow outputs. Each output has:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"name"}),": Identifier for the output value"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"type"}),": Data type of the output"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"value"}),": Expression referencing internal workflow values"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"description"}),": Optional human-readable description"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"variable-references",children:"Variable References"}),"\n",(0,t.jsx)(n.p,{children:"Workflows use a templating syntax to reference values:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"{{inputs.NAME}}"})," - Reference workflow input"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"{{tasks.TASK_NAME.outputs.OUTPUT_NAME}}"})," - Reference task output"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"{{outputs.NAME}}"})," - Reference workflow output"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"workflow-execution",children:"Workflow Execution"}),"\n",(0,t.jsx)(n.p,{children:"Workflows are executed by making a POST request to the execution API endpoint with the required input parameters. The platform:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Validates the input parameters"}),"\n",(0,t.jsx)(n.li,{children:"Creates an execution snapshot"}),"\n",(0,t.jsx)(n.li,{children:"Executes tasks sequentially"}),"\n",(0,t.jsx)(n.li,{children:"Maps outputs"}),"\n",(0,t.jsx)(n.li,{children:"Returns execution results"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"execution-states",children:"Execution States"}),"\n",(0,t.jsx)(n.p,{children:"A workflow execution can be in one of these states:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"PENDING"}),": Execution is queued"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"RUNNING"}),": Tasks are being executed"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"COMPLETED"}),": All tasks completed successfully"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"FAILED"}),": One or more tasks failed"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"CANCELLED"}),": Execution was cancelled by user"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsx)(n.p,{children:"Tasks can be configured with retry policies:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "name": "risky_task",\n  "type": "some.task",\n  "retry": {\n    "attempts": 3,\n    "delay": 5,\n    "multiplier": 2\n  }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"This will retry failed tasks up to 3 times with exponential backoff."}),"\n",(0,t.jsx)(n.h3,{id:"conditional-execution",children:"Conditional Execution"}),"\n",(0,t.jsx)(n.p,{children:"Tasks can include conditions to control their execution:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "name": "optional_task",\n  "type": "some.task",\n  "condition": "{{tasks.previous_task.outputs.should_continue}}"\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"The task will only execute if the condition evaluates to true."}),"\n",(0,t.jsx)(n.h2,{id:"workflow-management",children:"Workflow Management"}),"\n",(0,t.jsx)(n.h3,{id:"versioning",children:"Versioning"}),"\n",(0,t.jsx)(n.p,{children:"Each workflow modification creates a new version. The version history is preserved and can be accessed via the API. Executions always use the workflow version that was current when the execution started."}),"\n",(0,t.jsx)(n.h3,{id:"monitoring",children:"Monitoring"}),"\n",(0,t.jsx)(n.p,{children:"Workflow execution can be monitored through:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"API polling"}),"\n",(0,t.jsx)(n.li,{children:"Webhooks"}),"\n",(0,t.jsx)(n.li,{children:"Web UI dashboard"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The monitoring data includes:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Overall execution status"}),"\n",(0,t.jsx)(n.li,{children:"Individual task statuses"}),"\n",(0,t.jsx)(n.li,{children:"Execution time and resource usage"}),"\n",(0,t.jsx)(n.li,{children:"Error messages and stack traces"}),"\n",(0,t.jsx)(n.li,{children:"Output values"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Input Validation"}),": Define clear input parameters with appropriate types and validation rules"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Error Handling"}),": Configure retry policies for unreliable tasks"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Modularity"}),": Break complex workflows into smaller, reusable components"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Monitoring"}),": Set up appropriate monitoring and alerting for critical workflows"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Documentation"}),": Include clear descriptions for inputs, outputs, and expected behavior"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Testing"}),": Test workflows with various input combinations before production use"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Learn about ",(0,t.jsx)(n.a,{href:"/docs/tasks",children:"Tasks"})," configuration"]}),"\n",(0,t.jsxs)(n.li,{children:["Explore available ",(0,t.jsx)(n.a,{href:"/docs/task-types",children:"Task Types"})]}),"\n",(0,t.jsxs)(n.li,{children:["Check out example workflows in our ",(0,t.jsx)(n.a,{href:"/blog",children:"Blog"})]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var s=i(6540);const t={},o=s.createContext(t);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);